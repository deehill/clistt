/tmp/ghubRepoTest/RollbackFailoverProcess_ChecklistFolder/RollbackFailoverProcessChecklistOverview.doc \

	//--the idea is that this is basically the same as the 
			DnsDropletSwitchingRolloverChecklist/process

	The idea behind the RollbackFailoverProcessChecklist is to have 
	 a consistent process that helps the user/team minimize chances of 
	 missing something when setting up a comprehensive 
	 RollbackFailover process/env/system for the webapp/sysOps.
	The RollbackFailover process is intended to be able to 
	 invoke a process to "switch"/"rollover" to a 2nd instance in the 
	 event something causes the 1st to be deemed out of action.
	::No clue how to accomplish this, but need to be able to test 
	  that the process will work, and that it's been tested.
	The basic idea would be 2/multiple identical copies of the "app"
	 running on different cloud instances. A parent process would have 
	 be able to detect if something was failing on the master, and 
	 immeadiately switch to the "next" instance. The switch process 
	 would have to take care of "everything" in a seamless manner. ie, 
	 0/no lag time to the user.
	There would need to be a rough list of possible sceanrios to test 
	 for..Not even sure where to find skills for this..!

	The RollbackFailover works "after"/"in parallel" with the 
	 other checklists as they have completed/signed-off to create a 
	 "complete" RollbackFailover process for the 
	 instance/droplet that runs the webapp and runs as 2nd instance.

	This might have to be invoked via monitoring/logging as well..

	The RollbackFailover - used to ensure the steps/items 
	 required to "switch" the webapp are correct, and that the 
	 steps/processes used to "switch" the instance/droplet/app(s) 
	 work correctly

	The RollbackFailoverChecklist is indended to be modified 
	 as needed. This reduces chances of "missing" something, or to be able to 
	 "backtrack" if something has gone wrong during the overall switching 
	 process for the app. 
	The RollbackFailover process/checklist should be run as the 
	 other checklists for the web/test/prod/systemOps "are run"/"have been completed".

	The DNS/Rollback/Threat/Release processes/checklists etc.., can 
	 be handled in parallel (if they're used). 

	Once/after the RollbackFailover process/checklist is "working" 
	 correctly, the overall instance/cloud env can be used to complete the 
	 rest of the checklists if they're part of the app creation/release process.
	RollbackFailoverProcess works for the ops/system processes, when 
	 the defined "triggers" are invoked and set off the "switch" process, also 
	 need to capture all of this in the monitoring/logging process..
	 needs to be defined for the actions/triggers to cause the switch process
     to occur, as well as tested

	The idea of the RollbackFailoverProcess is to test/check off items 
	 similar to:
		?????
		-no clue what would invoke switching
		what clients would need to be triggered
		how would switching occur
		how fast!
		DNS/cname/ip change redirection
		database changing
		and probably 1 billion other issues that I can't
		 even begin to imagine..
		resolve this...

		at the same time...
		create the "tests" to test/check the edge cases for switching
		create the checklist/test harness 

		ability to log/monitor as well...
		etc..

		go through the steps in the:: 
			devProcessChecklist
			websiteChecklist
			testChecklist
			systemOpsChecklist

		define config/setup files
		inteface with external cron/security issues
		etc
		system setup.. cloud instance setup/clone/update/etc.

		in this checklist, 
			define the items to be checked -- for consistency..
			check items..
			
	 define what the "steps" are to be used during the 
		"RollbackFailover" process
	 ability to comment/reply
	 ability to add/mod repos for version control/branch policy

	the steps are used to have consistency, to make sure critical items 
	 aren't missed/skipped during the setup/dev/release/prod/post morteum
	 phases

	the idea is to map the checklists for the differnt parts of the 
	app create process, to the overall schedule.
 
	the overall RollbackFailoverCheckList might work with a 
	 projmgmt app as well
	-the RollbackFailoverCheckList works with the other 
	 "checklist" apps

	team members are able to comment/doc/respond to comments during 
	 dev process/cycle

	description/comments/docs for any subfolders/files to 
	 give user understanding of how/why flow/logic of overall project


	check off/test these items that they work/pass/fail
	modify scripts to setup the "Logging" as required
	update github for checklist versions, 

	=====================================================================



	once the website/app has gotten to a point where key 
	 UX/UI/logic/database functions are "working", it might be ok to 
	 start "checking" the overall Website, and using the/a 
	 WebsiteChecklist to check off what "works/doesn't work"

	The idea of the SystemOps is to test/check off items 
	 similar to the items in the: 
		WebsiteChecklist/ProductionCheckList/ReleaseCheckList items
	Key differences are that the items being tested/checked at this 
	 stage are expected to "work" correctly more of the time..
	 -broken items are/might be expected as this is kind of 
		iterative, but issues will be fewer in number
	 -focuses more on the actual code+system issues as well
	-might be useful to also have auto testing for the checklist items
	-checking/rechecking allows consistent progress to be handled/tracked
	-gives feedback on issues as well
	-checklist/strategy to be able to keep the process on track for 
	 the app in check.
	the overall checklist is based on what the project/webapp/dev/funcs/system need 
	 to implement/check off
	what the steps are:
	 during the dev/create/database app process,
	 for the initial setup process
	 for the dev steps
	 for database:
		define schema/layout
		define redundancy process/steps
		define sql/init data process
		define config/setup files
		inteface with external cron/security issues
		define/test db funcs to use in the app
		etc
		system setup.. cloud instance setup/clone/update/etc.

		in this checklist, 
			define the items to be checked -- for consistency..
			check items..
			
	 for the dev/testing func/unit testing/etc..
	 for... etc..
	 define what the "steps" are to be used during the 
		database/dev process
 	 define the internal/database/dev testing -- to add to checklist
	 ability to comment/reply
	 ability to add/mod repos for version control/branch policy

	the steps are used to have consistency, to make sure critical items 
	 aren't missed/skipped during the setup/dev/release/prod/post morteum
	 phases

	the idea is to map the checklists for the differnt parts of the 
	app create process, to the overall schedule.
 
	the overall TestCheckList might work with a projmgmt app as well
	-the TestCheckList works with the other "checklist" apps

	team members are able to comment/doc/respond to comments during 
	 dev process/cycle


	description/comments/docs for any subfolders/files to 
	 give user understanding of how/why flow/logic of overall project


